regex.search <- paste0("_b(",X$b,")",
"_g(",X$g,")",
"_e(",X$e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
length(ff)
f
ff
ff %>%
paste0(All_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types = cols()) %>%
mutate(it = 1:nrow(.)),
.id="iter") %>%
pivot_longer(cols=c(-it,-iter),
names_to=c("Est","Model","Method"),names_sep="_",
values_to=c("Value")) %>%
pivot_wider(names_from="Est",
values_from="Value")
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs %>%pull(Bias_Est) %>% range
ff
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>% .[8]
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
)
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%.[2]
X <- tibble(b=-0.5,g=-2,e=-0.5)
X
X %>%read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
Load_Sim_Results(X,All_dir)
Xx
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs %>% pull(Bias_est) %>% range
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs %>% pull(Bias_Est) %>% range
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
slice(-1) %>%
Get_PMs %>% pull(Bias_Est) %>% range
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
slice(-2) %>%
Get_PMs %>% pull(Bias_Est) %>% range
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
slice(-3) %>%
Get_PMs %>% pull(Bias_Est) %>% range
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
slice(-4) %>%
Get_PMs %>% pull(Bias_Est) %>% range
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
slice(-5) %>%
Get_PMs %>% pull(Bias_Est) %>% range
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
slice(-6) %>%
Get_PMs %>% pull(Bias_Est) %>% range
ff
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%.[2]
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%.[2] %>% file.remove
Save_Plot_ranges("Aggregate Results")
#Generate ALL plots
plots.CIL <- Make_All_MainPlots("Aggregate Results","MainPlots","None")
plots.slopes <- Make_All_MainPlots("Aggregate Results","MainPlots","Only")
plots.all <- Make_All_MainPlots("Aggregate Results","MainPlots","All")
Agg_dir
Plot_dir
Plot_dir <- "MainPlots"
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5)
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5)
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>% slice(1) -> X
X
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>%
split(1:nrow(.))
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>%
ungroup %>%
split(1:nrow(.))
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>%
ungroup %>%
split(1:nrow(.)) %>%
map_chr(~Make_MainPlot_tibble(.,Agg_dir=Agg_dir,slope=slope) %>%
Save_Plot_tibble(Plot_dir=paste0(Plot_dir,"/",slope)))
slope <- "None"
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>%
ungroup %>%
split(1:nrow(.)) %>%
map_chr(~Make_MainPlot_tibble(.,Agg_dir=Agg_dir,slope=slope) %>%
Save_Plot_tibble(Plot_dir=paste0(Plot_dir,"/",slope)))
X
Make_MainPlot_tibble(X,Agg_dir,slope)
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>%
ungroup %>% slice(1) -> X
X
Make_MainPlot(X,Agg_dir,slope)
Agg_dir
Make_MainPlot_tibble(X,Agg_dir,slope)
Make_MainPlot_tibble(X,Agg_dir,slope)$p
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>%
ungroup %>%nrow
p.tib <- Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(n>5) %>%
ungroup %>%
split(1:nrow(.)) %>%
map(~Make_MainPlot_tibble(.,Agg_dir=Agg_dir,slope=slope))
p.tib
i <- 1
cp <- p.tib[[i]]
cp
cp$p
cat("\nb = ",cp$b,"\tg = ",cp$g,"\te = ",cp$e)
for(i in 1:length(p.tib))
{
cp <- p.tib[[i]]
cp$p
cat("\nb = ",cp$b,"\tg = ",cp$g,"\te = ",cp$e)
Sys.sleep(10)
}
print(cp$p)
for(i in 1:length(p.tib))
{
cp <- p.tib[[i]]
print(cp$p)
cat("\nb = ",cp$b,"\tg = ",cp$g,"\te = ",cp$e)
Sys.sleep(10)
}
options(warn=2)
for(i in 1:length(p.tib))
{
cp <- p.tib[[i]]
cat("\nb = ",cp$b,"\tg = ",cp$g,"\te = ",cp$e)
print(cp$p)
Sys.sleep(10)
}
cp
cp$p
X <- tibble(b=-2,g=0.5,e=-0.5)
X
Make_MainPlot_tibble(X,Agg_dir,"None")
Make_MainPlot_tibble(X,Agg_dir,"None")$p
options(warn=0)
Make_MainPlot_tibble(X,Agg_dir,"None")$p
X
b <- -2
g <- 0.5
e <- -0.5
Methods <- switch(slope,
None = c("KM","Weighted","Unweighted","Pseudo"),
Only = c("Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"),
All = c("KM","Weighted","Unweighted","Pseudo",
"Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"))
Methods
Ranges <- read_csv(paste0(Agg_dir,"/00-Ranges.csv"),
col_types=cols()) %>%
filter(Slope == slope) %>%
select(-Slope) %>%
pivot_longer(c(min,max),
names_to="minmax",
values_to="Est") %>%
select(Measure,Est)
Ranges
ff <- list.files(Agg_dir)
regex.search <- paste0("_b(",b,")",
"_g(",g,")",
"_e(",e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
ff
tbl <- Prepare_Plot(ff,Methods,Agg_dir)
tbl
ff
Method
Methods
Agg_dir
filename <- ff
filename %>%
paste0(Agg_dir,"/",.) %>%
read_csv(col_types=cols())
filename %>%
paste0(Agg_dir,"/",.) %>%
read_csv(col_types=cols()) %>% is.na %>% any
filename %>%
paste0(Agg_dir,"/",.) %>%
read_csv(col_types=cols()) %>% is.na %>% which(arr.ind=T)
filename %>%
paste0(Agg_dir,"/",.) %>%
read_csv(col_types=cols())
filename %>%
paste0(Agg_dir,"/",.) %>%
read_csv(col_types=cols())  %>% names
filename %>%
paste0(Agg_dir,"/",.) %>%
read_csv(col_types=cols())  %>% select(starts_with("KM"))
ff
X
ff <- list.files(All_dir)
regex.search <- paste0("_b(",X$b,")",
"_g(",X$g,")",
"_e(",X$e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
ff
ff %>%
paste0(All_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types = cols()) %>%
mutate(it = 1:nrow(.)),
.id="iter") %>%
pivot_longer(cols=c(-it,-iter),
names_to=c("Est","Model","Method"),names_sep="_",
values_to=c("Value")) %>%
pivot_wider(names_from="Est",
values_from="Value")
ff %>%
paste0(All_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types = cols()) %>%
mutate(it = 1:nrow(.)),
.id="iter") %>%
pivot_longer(cols=c(-it,-iter),
names_to=c("Est","Model","Method"),names_sep="_",
values_to=c("Value")) %>%
pivot_wider(names_from="Est",
values_from="Value") -> .tbl
.tbl
Load_Sim_Results(X,All_dir)
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model)
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs
Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs %>% is.na %>% sum
Get_All_PM("All Results","Aggregate Results",nt)
Ranges <- read_csv(paste0(Agg_dir,"/00-Ranges.csv"),
col_types=cols()) %>%
filter(Slope == slope) %>%
select(-Slope) %>%
pivot_longer(c(min,max),
names_to="minmax",
values_to="Est") %>%
select(Measure,Est)
Ranges
#Generate ALL plots
plots.CIL <- Make_All_MainPlots("Aggregate Results","MainPlots","None")
plots.slopes <- Make_All_MainPlots("Aggregate Results","MainPlots","Only")
plots.all <- Make_All_MainPlots("Aggregate Results","MainPlots","All")
Ranges
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
) %>%
bind_rows(mutate(.,Slope = "All")) %>%
bind_rows(tibble(Measure = c("Coverage","Coverage","Bias","EmpSE"),
file.min = c(0,1,0,0),
file.max = c(0,1,0,0)) %>%
group_by_all %>%
expand(Slope = c("None","All","Only"))) %>%
group_by(Measure,Slope) %>%
summarise(min = min(file.min),max=max(file.max)) %>%
mutate(abs.max = pmax(abs(min),abs(max)),
min = if_else(Measure == "Bias",-abs.max,min),
max = if_else(Measure == "Bias",abs.max,max)) %>%
select(-abs.max)
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
) %>%
bind_rows(mutate(.,Slope = "All")) %>%
bind_rows(tibble(Measure = c("Coverage","Coverage","Bias","EmpSE"),
file.min = c(0,1,0,0),
file.max = c(0,1,0,0)) %>%
group_by_all %>%
expand(Slope = c("None","All","Only"))) %>%
group_by(Measure,Slope)
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
) %>%
bind_rows(mutate(.,Slope = "All")) %>%
bind_rows(tibble(Measure = c("Coverage","Coverage","Bias","EmpSE"),
file.min = c(0,1,0,0),
file.max = c(0,1,0,0)) %>%
group_by_all %>%
expand(Slope = c("None","All","Only"))) %>%
group_by(Measure,Slope) %>%
filter(file.min >-10 & file.max < 10)
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
) %>%
bind_rows(mutate(.,Slope = "All")) %>%
bind_rows(tibble(Measure = c("Coverage","Coverage","Bias","EmpSE"),
file.min = c(0,1,0,0),
file.max = c(0,1,0,0)) %>%
group_by_all %>%
expand(Slope = c("None","All","Only"))) %>%
group_by(Measure,Slope) %>%
filter(file.min >-10 & file.max < 10) %>%
summarise(min = min(file.min),max=max(file.max)) %>%
mutate(abs.max = pmax(abs(min),abs(max)),
min = if_else(Measure == "Bias",-abs.max,min),
max = if_else(Measure == "Bias",abs.max,max)) %>%
select(-abs.max)
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
) %>%
bind_rows(mutate(.,Slope = "All")) %>%
bind_rows(tibble(Measure = c("Coverage","Coverage","Bias","EmpSE"),
file.min = c(0,1,0,0),
file.max = c(0,1,0,0)) %>%
group_by_all %>%
expand(Slope = c("None","All","Only"))) %>%
group_by(Measure,Slope) %>%
filter(file.min >-10 & file.max < 10) %>%
summarise(min = min(file.min),max=max(file.max)) %>%
mutate(abs.max = pmax(abs(min),abs(max)),
min = if_else(Measure == "Bias",-abs.max,min),
max = if_else(Measure == "Bias",abs.max,max)) %>%
select(-abs.max) %>%
write_csv(paste0(Agg_dir,"/00-Ranges.csv"))
plots.CIL <- Make_All_MainPlots("Aggregate Results","MainPlots","None")
plots.slopes <- Make_All_MainPlots("Aggregate Results","MainPlots","Only")
plots.all <- Make_All_MainPlots("Aggregate Results","MainPlots","All")
Thesis.plot.dir <- "C:/Users/mbrxsmbc/Documents/Thesis/MyThesis/figure/IPCW_Logistic"
tibble(b=1,g=c(-1,0,1),e=0.5) %>%
mutate(fn = paste0("Plot_b(",b,")_g(",g,")_e(",e,").png")) %>%
group_by_all %>%
expand(src=c("Main","Slope")) %>%
mutate(dir=if_else(src == "Main","None","Only")) %>%
mutate(old_file=paste0("MainPlots/",dir,"/Main",fn),
new_file=paste0(Thesis.plot.dir,"/",src,fn)) %>%
ungroup %>%
split(1:nrow(.)) %>%
map(~{file.remove(.$new_file);return(.)}) %>%
map(~file.copy(.$old_file,.$new_file))
rm(list=ls())
pkgs <- c("readr","tibble","dplyr","magrittr",
"survival","purrr","tidyr","rlang",
"furrr","stringr","pseudo","ggplot2")
invisible(purrr::walk(pkgs,library,character.only=T))
source("util functions.R")
source("calibration functions.R")
source("save and load functions.R")
source("dgm functions.R")
source("aggregating functions.R")
source("plot functions.R")
### Global Parameters to use ####################
Run_parallel <- 3 #Will be set to the max of this and Cores - 1
n <- 10000 #Population size
N <- 100 #number of sims
nt <- 100 #Number of time points
# Vector of what parameters to try (full list)
g.list <- (-4:4)/2
b.list <- (-4:4)/2
e.list <- (-1:1)/2
## We're going to prioritise these first:
#g.list <- -1:1
#b.list <- -1:1
#e.list <- -1:1/2
###############################################
#Sometimes the GLMs give warnings, these aren't informative anymore
options(warn=-1)
memory.limit(20000)
#Pseudo function requires large matrices,
# so we need to increase the RAM eaten by R
#Limit Cores to try to use
Run_parallel %<>% min(parallel::detectCores()-1)
#Load previous results (if relevant) & get avg time
Done <- Load_Done_Summary("Aggregate Results")
avg.time <- mean(Done$time.taken,na.rm=T)/1000
# Random, Schandom! Let's set the seed anyway
set.seed(Sys.time())
#Figure out which simulations haven't been run yet
# Generate a value to be used as a seed here for replicability
Sims.tbd <- expand(tibble(),
b = round(b.list,2),
g = round(g.list,2),
e = round(e.list,2),
iter = 1:N) %>%
anti_join(Done,by=c("b","g","e","iter")) %>%
mutate(seed = round(runif(n(),0,2^31-1))) %>%
left_join(Done %>%
group_by(b,g,e) %>%
summarise(n=n()),
by=c("b","g","e")) %>%
filter(n < 6) %>%
group_by(b,g,e) %>%
slice(1:(6-n)) %>%
ungroup
# How long will this take?
ETA <- nrow(Sims.tbd)*avg.time/Run_parallel
source("plot functions.R")
ETA
nrow(Sims.tbd)
Get_All_PM("All Results","Aggregate Results",nt)
