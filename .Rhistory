magrittr:::is_pipe
?is.call
is.call
match.call()
class(match.call())
?append
current_call <- quote(3 %>% add(2) %>% divide_by(5) %>% multiply_by(10))
current_call
pipeline <- list()
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
pipeline <- append(func_list,current_call[[3]])
current_call <- current_call[[1]]
}
pipeline <- list()
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
pipeline <- append(pipeline,current_call[[3]])
current_call <- current_call[[1]]
}
pipeline
current_call
current_call <- quote(3 %>% add(2) %>% divide_by(5) %>% multiply_by(10))
call0 <- current_call
call0
pipeline <- list()
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
pipeline <- append(pipeline,current_call[[3]])
current_call <- current_call[[2]]
}
pipeline
current_call
pipeline <- c(current_call,rev(pipeline))
pipeline
is.call(mean)
current_call <- call0
pipeline <- list()
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
i <- i+1
pipeline[[i]] <- current_call[[3]]
current_call <- current_call[[2]]
}
pipeline <- c(current_call,rev(pipeline))
pipeline <- list()
i <- 0
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
i <- i+1
pipeline[[i]] <- current_call[[3]]
current_call <- current_call[[2]]
}
pipeline <- c(current_call,rev(pipeline))
pipeline
#current_call <- match.call()
current_call <- quote(c(1,2,3) %>% add(2) %>% divide_by(2) %>% mean %>% multiply_by(3))
current_call
pipeline <- list()
i <- 0
is.call(current_call)
identical(current_call[[1]],quote(`%>%`))
pipeline <- list()
i <- 0
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
i <- i+1
pipeline[[i]] <- current_call[[3]]
current_call <- current_call[[2]]
}
pipeline
pipeline <- c(current_call,rev(pipeline))
pipeline
current_call <- quote(c(1,2,3) %>% add(2) %>% divide_by(2) %>% mean %>% multiply_by(3))
pipeline <- list()
i <- 0
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
i <- i+1
pipeline[[i]] <- current_call[[3]]
current_call <- current_call[[2]]
}
pipeline <- pipeline[[i+1]] <- current_call
pipeline
current_call <- quote(c(1,2,3) %>% add(2) %>% divide_by(2) %>% mean %>% multiply_by(3))
pipeline <- list()
i <- 0
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
i <- i+1
pipeline[[i]] <- current_call[[3]]
current_call <- current_call[[2]]
}
pipeline[[i+1]] <- current_call
pipeline
magrittr:::wrap_function
pipeline2 <- lapply(pipeline,
function(x) eval(call("function", as.pairlist(alist(. = )), x),
env, env)
while(length(pipeline) > 0)
{
}
}
`%>%` <- function (lhs, rhs)
{
parent <- parent.frame()
env <- new.env(parent = parent)
chain_parts <- split_chain(match.call(), env = env)
pipes <- chain_parts[["pipes"]]
rhss <- chain_parts[["rhss"]]
lhs <- chain_parts[["lhs"]]
env[["_function_list"]] <- lapply(1:length(rhss), function(i) wrap_function(rhss[[i]],
pipes[[i]], parent))
env[["_fseq"]] <- `class<-`(eval(quote(function(value) freduce(value,
`_function_list`)), env, env), c("fseq",
"function"))
env[["freduce"]] <- freduce
if (is_placeholder(lhs)) {
env[["_fseq"]]
}
else {
env[["_lhs"]] <- eval(lhs, parent, parent)
result <- withVisible(eval(quote(`_fseq`(`_lhs`)),
env, env))
if (is_compound_pipe(pipes[[1L]])) {
eval(call("<-", lhs, result[["value"]]),
parent, parent)
}
else {
if (result[["visible"]])
result[["value"]]
else invisible(result[["value"]])
}
}
}
split_chain <- function(expr,env)
{
rhss <- list()
pipes <- list()
i <- 1L
while (is.call(expr) && is_pipe(expr[[1L]])) {
pipes[[i]] <- expr[[1L]]
rhs <- expr[[3L]]
if (is_parenthesized(rhs))
rhs <- eval(rhs, env, env)
rhss[[i]] <- if (is_dollar(pipes[[i]]) || is_funexpr(rhs))
rhs
else if (is_function(rhs))
prepare_function(rhs)
else if (is_first(rhs))
prepare_first(rhs)
else rhs
if (is.call(rhss[[i]]) && identical(rhss[[i]][[1L]],
quote(`function`)))
stop("Anonymous functions myst be parenthesized",
call. = FALSE)
expr <- expr[[2L]]
i <- i + 1L
}
list(rhss = rev(rhss), pipes = rev(pipes), lhs = expr)
}
current_call <- quote(c(1,2,3) %>% add(2) %>% divide_by(2) %>% mean %>% multiply_by(3))
pipeline <- list()
i <- 0
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
i <- i+1
pipeline[[i]] <- current_call[[3]]
current_call <- current_call[[2]]
}
pipeline[[i+1]] <- current_call
pipeline2 <- lapply(pipeline,
function(x) eval(call("function", as.pairlist(alist(. = )), x),
env, env))
env
parent <- parent.frame()
env <- new.env(parent=parent)
current_call <- quote(c(1,2,3) %>% add(2) %>% divide_by(2) %>% mean %>% multiply_by(3))
pipeline <- list()
i <- 0
while(is.call(current_call) && identical(current_call[[1]],quote(`%>%`)))
{
i <- i+1
pipeline[[i]] <- current_call[[3]]
current_call <- current_call[[2]]
}
pipeline[[i+1]] <- current_call
pipeline2 <- lapply(pipeline,
function(x) eval(call("function", as.pairlist(alist(. = )), x),
env, env))
pipeline2
magrittr:::wrap_function
alist
as.pairlist
freduce
pipeline2
pipeline2[[5]]
pipeline2[[4]](pipeline2[[5]])
magrittr::is_parenthesized
magrittr:::is_parenthesized
magrittr:::is_funexpr
rm(`%>%`)
rm(pipeline)
rm(pipeline2)
rm(parent)
rm(env)
.out
.out %>%
group_by(b,g,e) %>%
mutate(new_iter = 1:row_number())
.out %>%
group_by(b,g,e) %>%
mutate(new_iter = row_number())
head(ff)
ff %>%
tibble(ff=.) %>%
mutate(b = "b",g="g",e="e",iter="i",time.taken="t",seed="s") %>%
mutate_at(vars(b,g,e,iter,time.taken,seed),
~paste0("(?<=",.,"\\().+?(?=\\))") %>%
str_extract(ff,.) %>%
as.numeric)
.out <- ff %>%
tibble(ff=.) %>%
mutate(b = "b",g="g",e="e",iter="i",time.taken="t",seed="s") %>%
mutate_at(vars(b,g,e,iter,time.taken,seed),
~paste0("(?<=",.,"\\().+?(?=\\))") %>%
str_extract(ff,.) %>%
as.numeric) %>%
group_by(b,g,e) %>%
mutate(new_iter = row_number(),
new_ff = paste0("Result_b(",b,
")_g(",g,
")_e(",e,
")_i(",new_iter,
")_s(",seed,
")_t(",time.taken,
").csv"))
.out
.out %>% select(ff,new_ff)
.out %>% ungroup %>% select(ff,new_ff)
.out %>% ungroup %>% select(ff,new_ff) %>% mutate_all(~substring(5))
.out %>% ungroup %>% select(ff,new_ff) %>% mutate_all(~substring(.,5))
.out %>% ungroup %>% select(ff,new_ff) %>% mutate_all(~substring(.,6))
.out %>% ungroup %>% select(ff,new_ff) %>% mutate_all(~substring(.,16))
.out %>% ungroup %>% select(ff,new_ff) %>% mutate_all(~substring(.,26))
?file.rename
ff %>%
tibble(ff=.) %>%
mutate(b = "b",g="g",e="e",iter="i",time.taken="t",seed="s") %>%
mutate_at(vars(b,g,e,iter,time.taken,seed),
~paste0("(?<=",.,"\\().+?(?=\\))") %>%
str_extract(ff,.) %>%
as.numeric) %>%
group_by(b,g,e) %>%
mutate(new_iter = row_number(),
new_ff = paste0("Result_b(",b,
")_g(",g,
")_e(",e,
")_i(",new_iter,
")_s(",seed,
")_t(",time.taken,
").csv")) %>%
mutate_at(c(new_ff,ff),~paste0(All_dir,"/",.))
ff %>%
tibble(ff=.) %>%
mutate(b = "b",g="g",e="e",iter="i",time.taken="t",seed="s") %>%
mutate_at(vars(b,g,e,iter,time.taken,seed),
~paste0("(?<=",.,"\\().+?(?=\\))") %>%
str_extract(ff,.) %>%
as.numeric) %>%
group_by(b,g,e) %>%
mutate(new_iter = row_number(),
new_ff = paste0("Result_b(",b,
")_g(",g,
")_e(",e,
")_i(",new_iter,
")_s(",seed,
")_t(",time.taken,
").csv")) %>%
mutate_at(vars(new_ff,ff),~paste0(All_dir,"/",.))
ff %>%
tibble(ff=.) %>%
mutate(b = "b",g="g",e="e",iter="i",time.taken="t",seed="s") %>%
mutate_at(vars(b,g,e,iter,time.taken,seed),
~paste0("(?<=",.,"\\().+?(?=\\))") %>%
str_extract(ff,.) %>%
as.numeric) %>%
group_by(b,g,e) %>%
mutate(new_iter = row_number(),
new_ff = paste0("Result_b(",b,
")_g(",g,
")_e(",e,
")_i(",new_iter,
")_s(",seed,
")_t(",time.taken,
").csv")) %>%
mutate_at(vars(new_ff,ff),~paste0(All_dir,"/",.)) %$%
file.rename(ff,new_ff)
Get_All_PM("All Results","Aggregate Results",nt)
X
Save_Sim_Result <- function(res,X,time.start,All_dir=".")
{
time.end <- time.start %>%
difftime(Sys.time(),units="s") %>%
as.numeric %>%
abs %>%
multiply_by(1000) %>%
round
.filename <- paste0(All_dir,"/Result",
"_b(",X$b,")",
"_g(",X$g,")",
"_e(",X$e,")",
"_i(",X$iter,")",
"_s(",X$seed,")",
"_t(",time.end,")",
".csv")
res %>%
arrange(it) %>%
select(-it) %>%
write_csv(.filename)
return(res)
}
Save_Errors <- function(res,X,Err_dir=".")
{
#Checks the results for any errors (i.e. NAs)
.out <- F
if(any(is.na(res)))
{
#If there are errors, it will save them in a separate directory
.filename <- paste0(Err_dir,"/Result",
"_b(",X$b,")",
"_g(",X$g,")",
"_i(",X$iter,")",
"_s(",X$seed,")",
".csv")
which(is.na(res),arr.ind=T) %>%
as_tibble() %>%
transmute(it = row,
Var= names(res)[col]) %>%
write_csv(.filename)
.out <- T
}
#Output is whether or not an error was found
return(.out)
}
Load_Done <- function(All_dir=".",nt)
{
ff <- list.files(All_dir)
if(length(ff) > 0)
{
.out <- ff %>%
tibble(ff=.) %>%
mutate(b = "b",g="g",e="e",iter="i",time.taken="t") %>%
mutate_at(vars(b,g,e,iter,time.taken),
~paste0("(?<=",.,"\\().+?(?=\\))") %>%
str_extract(ff,.) %>%
as.numeric) %>%
mutate(fn = paste0(All_dir,"/",ff)) %>%
mutate(n = map_int(as.list(fn),~nrow(read_csv(.,col_types = cols())))) %>%
filter(n==nt) %>%
select(b,g,e,iter,time.taken)
} else
{
.out <- tibble(g=numeric(),
b=numeric(),
e=numeric(),
iter=numeric(),
time.taken=numeric())
}
return(.out)
}
Load_Sim_Results <- function(X,All_dir=".")
{
#Loads the sim results matching the
#  b, g & e variables in the X tibble
if(nrow(X) > 1) X <- X[1,]
ff <- list.files(All_dir)
regex.search <- paste0("_b(",X$b,")",
"_g(",X$g,")",
"_e(",X$e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
ff %>%
paste0(All_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types = cols()) %>%
mutate(it = 1:nrow(.)),
.id="iter") %>%
pivot_longer(cols=c(-it,-iter),
names_to=c("Est","Model","Method"),names_sep="_",
values_to=c("Value")) %>%
pivot_wider(names_from="Est",
values_from="Value")
}
Save_Aggregate_Results <- function(X,All_dir=".",Agg_dir=".")
{
cat("\n\nAggregating b=",X$b," g=",X$g," e=",X$e)
Y <- Load_Sim_Results(X,All_dir) %>%
mid_frac_by(0.9,it,Method,Model) %>%
Get_PMs %>%
filter(N>5) %>%
select(-N) %>%
pivot_longer(cols=c(ends_with("Est"),ends_with("SE")),
names_to=c("Measure","Est"),names_sep="_",
values_to="Value") %>%
pivot_wider(names_from=c("Method","Measure","Est"),
names_sep="_",
values_from="Value")
cat("\nAggregated b=",X$b," g=",X$g," e=",X$e)
if(nrow(Y)> 1)
{
.filename <- paste0("Aggregate",
"_b(",X$b,")",
"_g(",X$g,")",
"_e(",X$e,")",
".csv")
write_csv(Y,paste0(Agg_dir,"/",.filename))
}
cat("\nSaved b=",X$b," g=",X$g," e=",X$e)
return(X)
}
Load_Done_Summary <- function(Agg_dir=".")
{
Agg_dir %>%
paste0("/00-Done.csv") %>%
read_csv(col_types=cols())
}
Save_Plot<-function(b,g,e,p,Plot_dir=".")
{
.filename <- paste0("MainPlot",
"_b(",b,")",
"_g(",g,")",
"_e(",e,")",
".png") %>%
paste0(Plot_dir,"/",.)
ggsave(.filename,p,dpi=500,width=20,height=10,units="cm")
return(.filename)
}
Save_Plot_tibble <- function(X,Plot_dir=".")
{
Save_Plot(X$b,X$g,X$e,X$p[[1]],Plot_dir=Plot_dir)
}
Save_Plot_ranges <- function(Agg_dir=".")
{
list.files(Agg_dir) %>%
.[grep("^Aggregate",.)] %>%
paste0(Agg_dir,"/",.) %>%
map_dfr(~read_csv(.,col_types=cols()) %>%
pivot_longer(cols=-c(Model,it),
names_to=c("Method","Measure","Est"),
names_sep="_",
values_to="values") %>%
mutate(Slope = if_else(grepl(".Slope",Method),"Only","None")) %>%
select(Measure,Slope,values) %>%
group_by(Measure,Slope) %>%
summarise(file.min=min(values,na.rm=T),
file.max=max(values,na.rm=T))
) %>%
bind_rows(mutate(.,Slope = "All")) %>%
bind_rows(tibble(Measure = c("Coverage","Coverage","Bias","EmpSE"),
file.min = c(0,1,0,0),
file.max = c(0,1,0,0)) %>%
group_by_all %>%
expand(Slope = c("None","All","Only"))) %>%
group_by(Measure,Slope) %>%
filter(file.min >-10 & file.max < 10) %>%
summarise(min = min(file.min),max=max(file.max)) %>%
mutate(abs.max = pmax(abs(min),abs(max)),
min = if_else(Measure == "Bias",-abs.max,min),
max = if_else(Measure == "Bias",abs.max,max)) %>%
select(-abs.max) %>%
write_csv(paste0(Agg_dir,"/00-Ranges.csv"))
}
Get_All_PM("All Results","Aggregate Results",nt)
x <- .Last.value
nrow(x)
tabkle(x$n)
table(x$n)
Load_Done_Summary("Aggregate Results")
Load_Done_Summary("Aggregate Results") %>% group_by(b,g,e) %>% summarise(n=n())
x
Load_Done_Summary("Aggregate Results") %>% group_by(b,g,e) %>% summarise(n=n()) %>% anti_join(x,by=c("b","g","e"))
Load_Done_Summary("Aggregate Results") %>% group_by(b,g,e) %>% summarise(n=n()) %>% anti_join(x,by=c("b","g","e")) %$% table(n)
plots.CIL <- Make_All_MainPlots("Aggregate Results","MainPlots","None")
plots.slopes <- Make_All_MainPlots("Aggregate Results","MainPlots","Only")
plots.all <- Make_All_MainPlots("Aggregate Results","MainPlots","All")
Thesis.plot.dir <- "C:/Users/mbrxsmbc/Documents/Thesis/MyThesis/figure/IPCW_Logistic"
tibble(b=1,g=c(-1,0,1),e=0.5) %>%
mutate(fn = paste0("Plot_b(",b,")_g(",g,")_e(",e,").png")) %>%
group_by_all %>%
expand(src=c("Main","Slope")) %>%
mutate(dir=if_else(src == "Main","None","Only")) %>%
mutate(old_file=paste0("MainPlots/",dir,"/Main",fn),
new_file=paste0(Thesis.plot.dir,"/",src,fn)) %>%
ungroup %>%
split(1:nrow(.)) %>%
map(~{file.remove(.$new_file);return(.)}) %>%
map(~file.copy(.$old_file,.$new_file))
Load_Done_Summary(Agg_dir)
Agg_dir <- "Aggregate Results"
Load_Done_Summary(Agg_dir)
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n())
Load_Done_Summary(Agg_dir) %>%
group_by(b,g,e) %>%
summarise(n=n()) %>%
filter(b == 1 & g == -1.5 & e == 0.5)
g.list <- (-4:4)/2
b.list <- (-4:4)/2
e.list <- (-1:1)/2
g.list
b.list
e.list
