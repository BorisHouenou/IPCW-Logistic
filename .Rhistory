return(Done)
}
rm(list=ls())
pkgs <- c("readr","tibble","dplyr","magrittr",
"survival","purrr","tidyr","rlang",
"furrr","stringr","pseudo")
invisible(purrr::walk(pkgs,library,character.only=T))
options(warn=-1)
source("util functions.R")
source("calibration functions.R")
source("save and load functions.R")
source("dgm functions.R")
source("aggregating functions.R")
Get_All_PM("All Results","Aggregate Results")
n <- 10000 #Population size
N <- 100 #number of sims
nt <- 100 #Number of time points
g.list <- c(-1,0,1)
b.list <- 1
e.list <- 0.5
Get_All_PM("All Results","Aggregate Results")
dir <- "Aggregate Results"
ff <- list.files(dir)
ff
b <- 1
g <- -1
e <- 0.5
ff <- list.files(dir)
regex.search <- paste0("_b(",b,")",
"_g(",g,")",
"_e(",e,")")
regex.search
ff <- ff[grepl(regex.search,ff)]
ff
ff <- list.files(dir)
regex.search <- paste0("_b(",b,")",
"_g(",g,")",
"_e(",e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
ff
read_csv(ff,col_types=cols())
?read_csv
read_csv(paste0(dir,"/",ff),col_types=cols())
.tbl <- read_csv(paste0(dir,"/",ff),col_types=cols())
.tbl
.tbl <- read_csv(paste0(dir,"/",ff),col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value")
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value")
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
pivot_wider(names_from=Est,values_from=Value)
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
pivot_wider(names_from=Est,values_from=Value)
?switch
Methods <- list(None = c("KM","Weighted","Unweighted","Pseudo"),
Only = paste(c("Unweighted","Weighted","Pseudo"),".Slope"))
Methods
Methods$All <- c(Methods$None,Methods$Only)
Methods
Methods <- list(None = c("KM","Weighted","Unweighted","Pseudo"),
Only = paste0(c("Unweighted","Weighted","Pseudo"),".Slope"))
Methods$All <- c(Methods$None,Methods$Only)
slope <- "None"
Methods <- switch(slope,
None = c("KM","Weighted","Unweighted","Pseudo"),
Only = c("Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"),
All = c("KM","Weighted","Unweighted","Pseudo",
"Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"))
Methods
.tbl<- ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
pivot_wider(names_from=Est,values_from=Value) %>%
filter(Method %in% Methods)
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
pivot_wider(names_from=Est,values_from=Value) %>%
filter(Method %in% Methods)
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value)
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
ggplot() +
geom_line(aes(it,Est,col=Method)) +
facet_grid(rows=vars(Measure),cols=vars(Model))
library(ggplot)
library(ggplot2)
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
ggplot() +
geom_line(aes(it,Est,col=Method)) +
facet_grid(rows=vars(Measure),cols=vars(Model))
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
ggplot() +
geom_line(aes(it,Est,col=Method)) +
facet_grid(rows=vars(Measure),cols=vars(Model),
scales="free")
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
mutate(LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE) %>%
ggplot() +
geom_line(aes(it,Est,col=Method)) +
geom_ribbon(aes(it,ymin=LL,ymax=UL,col=Method),alpha=0.2) +
facet_grid(rows=vars(Measure),cols=vars(Model),
scales="free")
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
mutate(LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE) %>%
ggplot() +
geom_line(aes(it,Est,col=Method)) +
geom_ribbon(aes(it,ymin=LL,ymax=UL,fill=Method),alpha=0.2) +
facet_grid(rows=vars(Measure),cols=vars(Model),
scales="free")
Make_MainPlot <- function(b,g,e,dir=".",slope="None")
{
#slope values:
#   None = Only Calibration-in-the-large results
#   All = All results
#   Only = Slope results only
Methods <- switch(slope,
None = c("KM","Weighted","Unweighted","Pseudo"),
Only = c("Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"),
All = c("KM","Weighted","Unweighted","Pseudo",
"Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"))
ff <- list.files(dir)
regex.search <- paste0("_b(",b,")",
"_g(",g,")",
"_e(",e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
if(length(ff) == 1)
{
ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
mutate(LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE) %>%
ggplot() +
geom_line(aes(it,Est,col=Method)) +
geom_ribbon(aes(it,ymin=LL,ymax=UL,fill=Method),alpha=0.2) +
facet_grid(rows=vars(Measure),cols=vars(Model),
scales="free")
} else return(NULL)
}
shiny::runApp('MainPlot')
runApp('MainPlot')
?sliderInput
runApp('MainPlot')
runApp('C:/Users/mbrxsmbc/Documents/IPCW Logisitic/Main Plot app.R')
Make_MainPlot <- function(b,g,e,dir=".",slope="None")
{
#slope values:
#   None = Only Calibration-in-the-large results
#   All = All results
#   Only = Slope results only
Methods <- switch(slope,
None = c("KM","Weighted","Unweighted","Pseudo"),
Only = c("Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"),
All = c("KM","Weighted","Unweighted","Pseudo",
"Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"))
ff <- list.files(dir)
regex.search <- paste0("_b(",b,")",
"_g(",g,")",
"_e(",e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
if(length(ff) == 1)
{
tbl <- ff %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
mutate(LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE)
ggplot(tbl) +
geom_line(aes(it,Est,col=Method)) +
geom_ribbon(aes(it,ymin=LL,ymax=UL,fill=Method),alpha=0.2) +
facet_grid(rows=vars(Measure),cols=vars(Model),
scales="free")
} else return(NULL)
}
runApp('Main Plot app.R')
?case_when
runApp('Main Plot app.R')
runApp('Main Plot app.R')
runApp('Main Plot app.R')
input <- list()
input$slope_choice <- "Calibration-in-the-large"
switch(input$slope_choice,
`Calibration-in-the-large` ~ "None",
`Calibration Slope` ~ "Only",
`Both` ~ "All")
slope <- switch(input$slope_choice,
"Calibration-in-the-large" ~ "None",
"Calibration Slope" ~ "Only",
"Both" ~ "All")
?switch
slope <- switch(input$slope_choice,
`Calibration-in-the-large` = "None",
`Calibration Slope` = "Only",
`Both` = "All")
slope
runApp('Main Plot app.R')
Get_All_PM("All Results","Aggregate Results")
runApp('Main Plot app.R')
Get_PMs <- function(.res)
{
.res %>%
mutate(.slope = grepl(".Slope",Method,fixed=T),
True_value = case_when(.slope ~ 1,
Model == "P" ~ 0,
Model == "U" ~ 0.2,
Model == "O" ~ -0.2),
LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE) %>%
group_by(Model,Method,it) %>%
summarise(N = n(),
Bias_Est = mean(Est - True_value,na.rm=T),
EmpSE_Est = sd(Est - Bias_Est,na.rm=T),
Coverage_Est = mean( LL <= True_value & True_value <= UL ,na.rm=T),
Bias_SE = EmpSE_Est/sqrt(N),
EmpSE_SE = EmpSE_Est/sqrt(2*(N-1)),
Coverage_SE = Coverage_Est*(1-Coverage_Est)/N
) %>%
ungroup
}
Get_All_PM("All Results","Aggregate Results")
Get_All_PM <- function(All_dir=".",Agg_dir=".")
{
Done <- Load_Done(All_dir) %>%
group_by(b,g,e) %>%
summarise(n=n())
write_csv(Done,paste0(Agg_dir,"/00-Done.csv"))
Done %<>%
ungroup %>%
filter(n > 2) %>%
split(1:nrow(.)) %>%
map_dfr(~Save_Aggregate_Results(.,All_dir,Agg_dir))
return(Done)
}
Get_All_PM("All Results","Aggregate Results")
runApp('Main Plot app.R')
Get_PMs <- function(.res)
{
.res %>%
mutate(.slope = grepl(".Slope",Method,fixed=T),
True_value = case_when(.slope ~ 1,
Model == "P" ~ 0,
Model == "U" ~ -0.2,
Model == "O" ~ 0.2),
LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE) %>%
group_by(Model,Method,it) %>%
summarise(N = n(),
Bias_Est = mean(Est - True_value,na.rm=T),
EmpSE_Est = sd(Est - Bias_Est,na.rm=T),
Coverage_Est = mean( LL <= True_value & True_value <= UL ,na.rm=T),
Bias_SE = EmpSE_Est/sqrt(N),
EmpSE_SE = EmpSE_Est/sqrt(2*(N-1)),
Coverage_SE = Coverage_Est*(1-Coverage_Est)/N
) %>%
ungroup
}
Get_All_PM <- function(All_dir=".",Agg_dir=".")
{
Done <- Load_Done(All_dir) %>%
group_by(b,g,e) %>%
summarise(n=n())
write_csv(Done,paste0(Agg_dir,"/00-Done.csv"))
Done %<>%
ungroup %>%
filter(n > 2) %>%
split(1:nrow(.)) %>%
map_dfr(~Save_Aggregate_Results(.,All_dir,Agg_dir))
return(Done)
}
Get_All_PM("All Results","Aggregate Results")
runApp('Main Plot app.R')
Prepare_Plot <- function(filename,dir)
{
filename %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
mutate(LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE)
}
dir
ff <- list.files(dir)
regex.search <- paste0("_b(.)",
"_g(",g,")",
"_e(",e,")")
ff <- ff[grepl(regex.search,ff)]
ff
b
g
e
ff <- ff[grepl(regex.search,ff,fixed=T)]
ff
regex.search <- paste0("_b\\(.\\)",
"_g\\(",g,"\\)",
"_e\\(",e,"\\)")
ff <- ff[grepl(regex.search,ff)]
ff <- list.files(dir)
ff <- ff[grepl(regex.search,ff)]
ff
?ifelse
anim.var
anim.var <- "g"
ff <- list.files(dir)
s.b <- ifelse(anim.var=="b",".",b)
s.g <- ifelse(anim.var=="g",".",g)
s.e <- ifelse(anim.var=="e",".",e)
regex.search <- paste0("_b\\(",s.b,"\\)",
"_g\\(",s.g,"\\)",
"_e\\(",s.e,"\\)")
ff <- ff[grepl(regex.search,ff)]
ff
anim.var
ff <- list.files(dir)
ff
ff <- list.files(dir)
s.b <- ifelse(anim.var=="b",".*?",b)
s.g <- ifelse(anim.var=="g",".*?",g)
s.e <- ifelse(anim.var=="e",".*?",e)
regex.search <- paste0("_b\\(",s.b,"\\)",
"_g\\(",s.g,"\\)",
"_e\\(",s.e,"\\)")
regex.search
ff <- ff[grepl(regex.search,ff)]
ff
dr
dir
lapply(ff,Prepare_Plot,dir=dir)
tbl <- lapply(ff,Prepare_Plot,dir=dir)
tbl
?do
?do.call
?sliderInput
runApp('Main Plot app.R')
ggMainplot <- function(tbl)
{
ggplot(tbl) +
geom_line(aes(it,Est,col=Method)) +
geom_ribbon(aes(it,ymin=LL,ymax=UL,fill=Method),alpha=0.2) +
facet_grid(rows=vars(Measure),cols=vars(Model),
scales="free")
}
Prepare_Plot <- function(filename,dir)
{
filename %>%
paste0(dir,"/",.) %>%
read_csv(col_types=cols()) %>%
pivot_longer(col=-c(Model,it),
names_to=c("Method","Measure","Est"),names_sep="_",
values_to="Value") %>%
filter(Method %in% Methods) %>%
pivot_wider(names_from=Est,values_from=Value) %>%
mutate(LL = Est - qnorm(0.975)*SE,
UL = Est + qnorm(0.975)*SE)
}
Make_MainPlot <- function(b,g,e,dir=".",slope="None",anim=F)
{
#slope values:
#   None = Only Calibration-in-the-large results
#   All = All results
#   Only = Slope results only
Methods <- switch(slope,
None = c("KM","Weighted","Unweighted","Pseudo"),
Only = c("Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"),
All = c("KM","Weighted","Unweighted","Pseudo",
"Weighted.Slope","Unweighted.Slope",
"Pseudo.Slope"))
ff <- list.files(dir)
regex.search <- paste0("_b(",b,")",
"_g(",g,")",
"_e(",e,")")
ff <- ff[grepl(regex.search,ff,fixed=T)]
if(length(ff) == 1)
{
tbl <- Prepare_Plot(ff,dir)
if(!anim)
{
p <- ggMainplot(tbl)
p
} else return(tbl)
} else return(NULL)
}
source("plot functions.R")
runApp('Main Plot app.R')
Done <- Load_Done("All Results")
avg.time <- mean(Done$time.taken,na.rm=T)/1000
ETA <- nrow(Sims.tbd)*avg.time/parallel:::detectCores()
Sims.tbd <- expand(tibble(),
b = round(b.list,2),
g = round(g.list,2),
e = round(e.list,2),
iter = 1:N) %>%
anti_join(Done,by=c("b","g","e","iter")) %>%
mutate(seed = round(runif(n(),0,2^31-1)))
ETA <- nrow(Sims.tbd)*avg.time/parallel:::detectCores()
ETA
g.list <- (-2:2)/2
b.list <- 1
e.list <- 0.5
Sims.tbd <- expand(tibble(),
b = round(b.list,2),
g = round(g.list,2),
e = round(e.list,2),
iter = 1:N) %>%
anti_join(Done,by=c("b","g","e","iter")) %>%
mutate(seed = round(runif(n(),0,2^31-1)))
ETA <- nrow(Sims.tbd)*avg.time/parallel:::detectCores()
ETA
avg.time
#Whether to run in parallel or not
Run_parallel <- F
ETA <- nrow(Sims.tbd)*avg.time
if(Run_parallel) ETA <- ETA/parallel:::detectCores()
ETA
cat("\nAverage Time per simulation: ",round(avg.time,4)," seconds",
"\nTotal Estimated Time: ", round(ETA,4)," seconds",
"\nEstimated Time of Completion: ",as.character(Sys.time() + ETA),"\n\n\n")
cat("\nAverage Time per simulation: ",round(avg.time,4)," seconds",
"\nNumber of simulations to run: ",nrow(Sims.tbd)
"\nTotal Estimated Time: ", round(ETA,4)," seconds",
"\nEstimated Time of Completion: ",as.character(Sys.time() + ETA),"\n\n\n")
cat("\nAverage Time per simulation: ",round(avg.time,4)," seconds",
"\nNumber of simulations to run: ",nrow(Sims.tbd),
"\nTotal Estimated Time: ", round(ETA,4)," seconds",
"\nEstimated Time of Completion: ",as.character(Sys.time() + ETA),"\n\n\n")
?plan
